function testRegexInAppScript() {
  const htmlSnippet = '<div class="w-tab-content"><div class="w-tab-pane w--tab-active" data-w-tab="December 11th" id="Tab-1"><div class="december-11-wrapper"><div class="collection-list-wrapper-2 w-dyn-list"><div class="w-tab-pane" data-w-tab="December 12th"><div class="december-12th-wrapper" id="D">';
  
  // Regex to match the data-w-tab attribute
  const tabNameRegex = /data-w-tab="([^"]+)"/;

  // Extract the match
  const match = htmlSnippet.match(tabNameRegex);
  if (match) {
    Logger.log(`Extracted tab name: ${match[1]}`);
  } else {
    Logger.log("No match found.");
  }
}


function parseHTMLtoData(html) {
  const url = "https://www.techsgivingsummit.com/schedule"; // Replace with your actual URL

  // Fetch the HTML content
  const response = UrlFetchApp.fetch(url);
  html = response.getContentText();//.replace(/ w--tab-active/g, '');//.replace(' w--tab-active','');
  // console.log(html.substring(13000, 13061))
  // console.log(html.substring(24759, 25759))

  // Find all occurrences of '<div class="w-tab-content'
  const indices = [];
  let startIndex = html.indexOf('w-tab-pane');
  while (startIndex !== -1) {
    indices.push(startIndex-75);
    startIndex = html.indexOf('w-tab-pane', startIndex + 1);
  }

  console.log("Indices of '<div class=\"w-tab-pane':", indices);

  // Split the HTML into sections based on the indices
  const sections = [];
  for (let i = 0; i < indices.length; i++) {
    const start = indices[i];
    const end = i < indices.length - 1 ? indices[i + 1] : html.length; // Use the next index or the end of the HTML
    sections.push(html.substring(start, end));
    // console.log(`Section ${i + 1}:`, sections);
  }
  console.log(`Total Sections Found: ${sections.length}`);

  // Process each section to extract tabs and sessions
  const sessions = [];
  sections.forEach((section, index) => {
    // Extract tab name
    //  console.log(section.substring(0, 150));
    // const dateMatch = section.match(/data-w-tab="([^"]+)"/);
    // Look for the first data-w-tab in the section
    const dateMatch = section.match(/data-w-tab="([^"]+)"/);
    if (dateMatch) {
      console.log(`Section ${index + 1} Matched Date:`, dateMatch[1]);
      // console.log(`Section Content Preview:`, section.substring(0, 500)); // Log the surrounding context
    } else {
      console.log(`No date found in Section ${index + 1}`);
    }
    const currentDate = dateMatch ? dateMatch[1].replace("th", ", 2024") : "Unknown";
    // console.log(`Processing Section ${index + 1}: Tab Name - ${currentDate}`);

    // Regex to extract tabs with their `data-w-tab` attribute and sessions
    const sessionRegex = /<div class="speaker-session-wrapper">([\s\S]*?)(?=<div class="speaker-session-wrapper"|<\/div><\/div><\/div><\/div>)/g;
    const sessionMatches = section.match(sessionRegex);

    if (sessionMatches) {
      sessionMatches.forEach(sessionHtml => {
        // Field regexes
        const timeStartRegex = /<div class="text-block-230">(.*?)<\/div>/;
        const timeEndRegex = /<div class="text-block-230 end">(.*?)<\/div>/;
        const trackRegex = /<div[^>]*class="session-track"[^>]*>(.*?)<\/div>/;
        const titleRegex = /<h1 class="session-ttitle">(.*?)<\/h1>/;
        const descriptionRegex = /<p class="paragraph-8">(.*?)<\/p>/;
        const speakerRegex = /<div class="session-speaker">(.*?)<\/div>/g;
        const locationRegex = /<div class="session-location">\s*<a[^>]*>(.*?)<\/a>/;

        // Extract individual fields
        const timeStartRaw = extractField(sessionHtml, timeStartRegex);
        const timeStart = timeStartRaw ? timeStartRaw.replace('-', '') : null;
        const timeEnd = extractField(sessionHtml, timeEndRegex);
        const track = extractField(sessionHtml, trackRegex);
        const title = extractField(sessionHtml, titleRegex);
        const description = extractField(sessionHtml, descriptionRegex);

      // Extract multiple speakers
      const speakers = [];
      let speakerMatch;
      while ((speakerMatch = speakerRegex.exec(sessionHtml.replace('session-speaker name', 'session-speaker'))) !== null) {
        speakers.push(speakerMatch[1].trim());
        console.log(speakers)
      }
      const speakersString = speakers.join(", "); // Join speakers with a comma and space
      console.log(speakersString)

      const location = extractField(sessionHtml, locationRegex);

      // Only include sessions with at least time_start and title
      if (timeStart || title) {
        sessions.push({
          date: currentDate, // Add the event day
          time_start: timeStart,
          time_end: timeEnd,
          track,
          title,
          speakers: speakersString,
          description,
          location,
          });
        }
      });
    } else {
      console.log(`No sessions found for ${tabName}`);
    }
  });
  // Log the extracted data
  Logger.log(JSON.stringify(sessions, null, 2));

  // Step 5: Write data to Google Sheets
  const sheetName = "AppScript_Sessions";
  let sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
  if (!sheet) {
    sheet = SpreadsheetApp.getActiveSpreadsheet().insertSheet(sheetName);
  }
  sheet.clear();
  sheet.appendRow(["Date","Start Time", "End Time", "Track", "Title", "Speakers", "Description", "Location"]);
  sessions.forEach(session => {
    sheet.appendRow([
      session.date,
      session.time_start,
      session.time_end,
      session.track,
      session.title,
      session.speakers,
      session.description,
      session.location,
    ]);
  });

  return sessions;
}

function extractField(html, regex) {
  const match = html.match(regex);
  return match ? match[1].trim() : null;
}
